% File: wren/translate

%    Wren Translational Semantics
%    ==== ============= =========

%-----------------------------------------------------------------------

program(Code) --> [program,ide(I),is],blck(Code1),
                  { concat(Code1, ['HALT'], Code) }.

blck(Code) --> decs,[begin],commandSeq(Code,0,0,SynLab),[end].

decs --> dec, remdecs.
  remdecs --> decs.
  remdecs --> [].
decs --> [].

dec --> [var], varlist, [colon], type, [semicolon].

varlist --> [ide(Name)], remvars.
  remvars --> [comma], varlist.
  remvars --> [].

type --> [integer].        type --> [boolean].

commandSeq(Code,Temp,InhLab,SynLab) --> 
                          command(Code1,Temp,InhLab,SynLab1),
                          restcmds(Code2,Temp,SynLab1,SynLab),
                          { concat(Code1, Code2, Code) }.

restcmds(Code,Temp,InhLab,SynLab) --> 
                          [semicolon], 
                          command(Code1,Temp,InhLab,SynLab1),
                          restcmds(Code2,Temp,SynLab1,SynLab),
                          { concat(Code1, Code2, Code) }.

restcmds([],Temp,InhLab,InhLab) --> [].               

%-----------------------------------------------------------------------

command([['GET',Var]],Temp,Label,Label) --> [read,ide(Var)].

command(Code,Temp,Label,Label) --> 
                      [write], integerExpr(Code1,Temp),
                      { Temp1 is Temp+1,
                        temporary(Temp1,T1), 
                        concat(Code1,[['STO',T1],['PUT',T1]], Code) }.

command(['NO-OP'],Temp,Label,Label) --> [skip].

command(Code,Temp,Label,Label) -->
                     [ide(Var),assign], expr(Code1,Temp),
                     { concat(Code1, [['STO',Var]], Code) }.

command(Code,Temp,InhLab,SynLab) -->
         [if], { InhLab1 is InhLab+1, label(InhLab1,Lab) },
         booleanExpr(Code1,Temp), 
         [then], commandSeq(Code2,Temp,InhLab1,SynLab), [end,if],
         { concat(Code1, [['JF',Lab]],Code2, [[Lab,'LABEL']], Code) }.

command(Code,Temp,InhLab,SynLab) -->
      [if], { InhLab1 is InhLab+1, InhLab2 is InhLab+2,
                 label(InhLab1,Lab1), label(InhLab2,Lab2) },
      booleanExpr(Code1,Temp), [then],
      commandSeq(Code2,Temp,InhLab2,SynLab2), [else],
      commandSeq(Code3,Temp,SynLab2,SynLab), [end,if],
    { concat(Code1,[['JF',Lab1]|Code2],
             [['J',Lab2],[Lab1,'LABEL']|Code3], [[Lab2,'LABEL']], Code) }.

command(Code,Temp,InhLab,SynLab) -->
     [while], {InhLab1 is InhLab+1, label(InhLab1,L1),
              InhLab2 is InhLab+2, label(InhLab2,L2) },
     booleanExpr(Code1,Temp), [do], 
                       commandSeq(Code2,Temp,InhLab2,SynLab), [end,while],
     { concat([[L1,'LABEL']|Code1], [['JF',L2]|Code2], 
                                    [['J',L1],[L2,'LABEL']], Code) }.

%-----------------------------------------------------------------------

expr(Code,Temp) --> integerExpr(Code,Temp).        
expr(Code,Temp) --> booleanExpr(Code,Temp).

integerExpr(Code,Temp) --> term(Code1,Temp), restIntExpr(Code2,Temp),
                           { concat(Code1, Code2, Code) }.

restIntExpr(Code,Temp) --> weakop(Op), { Temp1 is Temp+1 },
                           term(Code1,Temp1), 
                           { optimize(Code1,OptCode1,Temp,Op) },
                           restIntExpr(Code2,Temp),
                           { concat(OptCode1, Code2, Code) }.

restIntExpr([],Temp) --> [].

term(Code,Temp) --> element(Code1,Temp), restTerm(Code2,Temp),
                    { concat(Code1,Code2,Code) }.

restTerm(Code,Temp) --> strongop(Op), { Temp1 is Temp+1 },
                        element(Code1,Temp1), 
                        { optimize(Code1,OptCode1,Temp,Op) },
                        restTerm(Code2,Temp),
                        { concat(OptCode1, Code2, Code) }.

restTerm([],Temp) --> [].

element([['LOAD',Number]],Temp) --> [num(Number)].

element([['LOAD',Var]],Temp) --> [ide(Var)].

element(Code,Temp) --> [lparen], integerExpr(Code,Temp), [rparen].

element(Code,Temp) --> [minus], integerExpr(Code1,Temp),
                       { Temp1 is Temp+1,
                         concat(Code1, [['STO',T1], 
                                ['LOAD',0],['SUB',T1]], Code) }.

weakop('ADD') --> [plus].
weakop('SUB') --> [minus].

strongop('MULT') --> [times].
strongop('DIV') --> [divides].

booleanExpr(Code,Temp) --> booleanTerm(Code1,Temp),restBooleanExpr(Code2,Temp),
                           { concat(Code1, Code2, Code) }.

restBooleanExpr(Code,Temp) --> 
                  {Temp1 is Temp+1, temporary(Temp1,T1)},
                  [or], booleanTerm(Code1,Temp1), 
                  restBooleanExpr(Code2,Temp),
                  { concat([['STO',T1]|Code1],[['OR',T1]|Code2],Code) }.

restBooleanExpr([],Temp) --> [].

booleanTerm(Code, Temp) --> 
      booleanElement(Code1,Temp),restBooleanTerm(Code2,Temp),
      { concat(Code1,Code2,Code) }.
     
restBooleanTerm(Code,Temp) --> 
                  {Temp1 is Temp+1, temporary(Temp1,T1)},
                  [and], booleanElement(Code1,Temp1), 
                  restBooleanTerm(Code2,Temp),
                  { concat([['STO',T1]|Code1],[['AND',T1]|Code2],Code) }.

restBooleanTerm([],Temp) --> [].

booleanElement([['LOAD',1]],Temp) --> [true].             
booleanElement([['LOAD',0]],Temp) --> [false].

booleanElement([['LOAD',I]],Temp) --> [ide(I)].         

booleanElement(Code,Temp) --> comparison(Code,Temp).

booleanElement(Code,Temp) --> 
	[lparen], booleanExpr(Code,Temp), [rparen].

booleanElement(Code,Temp) --> 
      [not],[lparen],booleanExpr(Code1,Temp),[rparen],
      { concat(Code1,['NOT'],Code) }.

comparison(Code,Temp) --> { Temp1 is Temp+1 },
                          integerExpr(Code1,Temp),
                          testcode(Tst), integerExpr(Code2,Temp1),
                          { optimize(Code2,OptCode2,Temp,'SUB') },
                          { concat(Code1, OptCode2, [Tst], Code) }.

testcode('TSTEQ') --> [equal].         testcode('TSTNE') --> [neq].
testcode('TSTLT') --> [less].          testcode('TSTLE') --> [lteq].
testcode('TSTGT') --> [grtr].          testcode('TSTGE') --> [gteq].

%-----------------------------------------------------------------------
%---- Auxiliary Functions ----------------------------------------------

label(Number,Label) :-
              name('L',L1), name(Number,L2), concat(L1,L2,L), name(Label,L).

temporary(Number,Temp) :-
              name('T',L1), name(Number,L2), concat(L1,L2,L), name(Temp,L).

optimize([['LOAD',Operand]],[[Opcode,Operand]],Temp,Opcode).

optimize(Code,OptCode,Temp,Op) :-
       Temp1 is Temp+1, Temp2 is Temp+2,
       temporary(Temp1,T1), temporary(Temp2,T2),
       concat([['STO',T1]|Code], [['STO',T2],['LOAD',T1], [Op,T2]], OptCode).

%-----------------------------------------------------------------------

concat([],L,L).
concat([X|Rest],L,[X|Rest1]) :- concat(Rest,L,Rest1).

concat(A,B,C,R) :- concat(A,B,X), concat(X,C,R).
concat(A,B,C,D,R) :- concat(A,B,X), concat(C,D,Y), concat(X,Y,R).

%-----------------------------------------------------------------------

capWord(Word,CapWord) :- name(Word,List), capLetters(List,CapList),
                         name(CapWord,CapList).
capLetters([],[]).
capLetters([First|Rest],[CapFirst|CapRest]):-
                     capLet(First,CapFirst), capLetters(Rest,CapRest).

capLet(L,CapL):- 97=<L, L=<122, CapL is L - 32.
capLet(L,L).

prettyprint([]).
prettyprint([[Label,'LABEL']|Rest]):- write(Label), put(9), write('LABEL'), nl,
                                    prettyprint(Rest).
prettyprint([[Rator,Rand]|Rest]):- put(9), write(Rator), put(9),
                                   capWord(Rand,CapRand), write(CapRand), nl,
                                   prettyprint(Rest).
prettyprint([Instr|Rest]) :- put(9), write(Instr), nl, prettyprint(Rest).

%------------------------------------------------------------------------------
%-- Utilities -----------------------------------------------------------------

go :- nl, write('>>> Translational Semantics for Wren <<<'), nl, nl,
      write('Enter name of source file:  '), nl, getfilename(FileName), nl, 
      see(FileName), scan(Tokens), seen, write('Scan successful'), nl, !,
      write(Tokens), nl, nl,
      program(Code,Tokens,[eop]), nl, 
      write('Parse successful'), nl, nl,
      write(Code), nl, nl, prettyprint(Code), nl.

getfilename(F) :- get0(C),restfilename(C,Cs),name(F,Cs).
   restfilename(C,[C|Cs]) :- filechar(C),get0(D),restfilename(D,Cs).
   restfilename(C,[]).

%------------------------------------------------------------------------------
%---------  Scanner  ----------------------------------------------------------

scan([T|Lt]) :-  tab(4), getch(C), gettoken(C, T, D), restprog(T, D, Lt).

getch(C) :- get0(C), (endline(C),nl,tab(4) ; endfile(C),nl ; put(C)).

restprog(eop, C, []).        % end of file reached with previous character
restprog(T,   C, [U|Lt]) :- gettoken(C, U, D), restprog(U, D, Lt).

gettoken(C, eop, 0) :- endfile(C).  
gettoken(C, T, D) :- single(C,T), getch(D).
gettoken(C, T, E) :- double(C,U),getch(D),(pair(C,D,T),getch(E) ; T=U,E=D).
gettoken(C, T, E) :- lower(C), getch(D), restid(D, Lc, E),   
                     name(I, [C|Lc]), (reswd(I),T=I ; T=ide(I)).
  restid(C, [C|Lc], E) :- idchar(C), getch(D),restid(D,Lc,E).
  restid(C, [],     C).    % end identifier if C is not id character
gettoken(C, num(N), E) :- digit(C), getch(D), restnum(D, Lc, E),  
                          name(N, [C|Lc]). 
  restnum(C, [C|Lc], E) :- digit(C), getch(D), restnum(D, Lc, E).
  restnum(C, [],     C).   % end number if C is not a digit
gettoken(C, T, E) :- whitespace(C), getch(D), gettoken(D,T,E).
gettoken(C, T, E) :- write('Illegal character: '), put(C), nl, abort.

reswd(program).  reswd(is).       reswd(begin).    reswd(end).   
reswd(var).      reswd(integer).  reswd(boolean).  reswd(read). 
reswd(write).    reswd(while).    reswd(do).       reswd(if).    
reswd(then).     reswd(else).     reswd(skip).     reswd(or).  
reswd(and).      reswd(true).     reswd(false).    reswd(not). 

single(40,lparen).   single(41,rparen).    single(42,times).
single(43,plus).     single(44,comma).     single(45,minus).
single(47,divides).  single(59,semicolon). single(61,equal).

double(58,colon).    double(60,less).      double(62,grtr).

pair(58,61,assign).       % :=
pair(60,62,neq).          % <>
pair(60,61,lteq).         % <=
pair(62,61,gteq).         % >=

%-----------------------------------------------------------------------

lower(C) :- 97=<C,C=<122.       % a-z
upper(C) :- 65=<C,C=<90.        % A-Z
digit(C)  :- 48=<C,C=<57.       % 0-9

space(32).     tabch(9).      period(46).      slash(47).
endline(10).   endfile(26).   endfile(-1).

whitespace(C) :- space(C) ; tabch(C) ; endline(C).
idchar(C) :- lower(C) ; digit(C).
filechar(C) :- lower(C) ; upper(C) ; digit(C) ; period(C) ; slash(C).

%-----------------------------------------------------------------------
