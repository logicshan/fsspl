
%   Evaluating an Applied Lambda Calculus
%   ========== == ======= ====== ========

%  Normal order evaluation

%  File: normal 

%------------------------------------------------------------------------------

evaluate(E,NewE) :- reduce(E,TempE),
                    pp(TempE),nl,nl,
                    evaluate(TempE,NewE).
evaluate(E,E).

reduce(comb(lamb(X,Body),Arg),R) :- 
                                    write('Rator = '),pp(lamb(X,Body)),nl,
                                    write('Rand = '),pp(Arg),nl,nl,
                                    subst(Body,X,Arg,R).
reduce(comb(con(C),con(Arg)),R) :- compute(C,Arg,R).   
reduce(comb(Rator,Rand),comb(NewRator,Rand)) :- reduce(Rator,NewRator).
reduce(comb(Rator,Rand),comb(Rator,NewRand)) :- reduce(Rand,NewRand).
reduce(lamb(X,Body),lamb(X,NewBody)) :- reduce(Body,NewBody).

subst(var(V),V,E1,E1).
subst(var(X),V,E1,var(X)).
subst(con(C),V,E1,con(C)).
subst(comb(Rator,Rand),V,E1,comb(NewRator,NewRand)) :- 
                                         subst(Rator,V,E1,NewRator),
                                         subst(Rand,V,E1,NewRand).
subst(lamb(V,E),V,E1,lamb(V,E)).
subst(lamb(X,E),V,E1,lamb(Z,NewE)) :- freevars(E1,F1),
                        (member(X,F1), freevars(E,F), 
                                       union(F,[V],F2), union(F1,F2,FV),
                                       variant(X,FV,Z),
                                       subst(E,X,var(Z),TempE),
                                       subst(TempE,V,E1,NewE)
                                     ; subst(E,V,E1,NewE), Z=X).
           
freevars(var(X),[X]).
freevars(con(C),[]).
freevars(comb(Rator,Rand),FV) :- freevars(Rator,RatorFV),freevars(Rand,RandFV),
                                 union(RatorFV,RandFV,FV).
freevars(lamb(X,E),FV) :- freevars(E,F),delete(X,F,FV).

%------------------------------------------------------------------------------

compute(succ,N,con(R)) :- R is N+1.
compute(pred,N,con(R)) :- N>0, R is N-1.  compute(pred,0,con(0)).
compute(sqr,N,con(R)) :- R is N*N.
compute(add,N,con(add(N))).  compute(add(M),N,con(R)) :- R is M+N.
compute(sub,N,con(sub(N))).  compute(sub(M),N,con(R)) :- R is M-N.
compute(mul,N,con(mul(N))).  compute(mul(M),N,con(R)) :- R is M*N.
compute(div,N,con(div(N))).  compute(div(M),N,con(R)) :- R is M//N.

%------------------------------------------------------------------------------

prime(X,PrimeX) :- name(X,L), concat(L,[39],NewL), name(PrimeX,NewL).

variant(X,L,NewX) :- member(X,L),prime(X,PrimeX),variant(PrimeX,L,NewX).
variant(X,L,X).

%------------------------------------------------------------------------------

union([],S,S).
union([H|T],S,U) :- member(H,S),union(T,S,U).
union([H|T],S,[H|U]) :- union(T,S,U).

delete(X,[],[]).
delete(H,[H|T],R) :- delete(H,T,R).
delete(X,[H|T],[H|R]) :- delete(X,T,R).

concat([],L,L).
concat([H|T],L,[H|M]) :- concat(T,L,M).

member(H,[H|T]).
member(X,[H|T]) :- member(X,T).

%------------------------------------------------------------------------------

pp(var(X)) :- write(X).      pp(con(C)) :- write(C).
pp(lamb(X,E)) :- write('(L '),write(X),tab(1),pp(E),write(')').
pp(comb(Rator,Rand)) :- write('('),pp(Rator),tab(1),pp(Rand),write(')').

%------------------------------------------------------------------------------

go :- nl,write('>>> Evaluating the Lambda Calculus <<<'),nl,nl,
      write('Enter name of source file:  '), nl, getfilename(FileName),nl,
      see(FileName), scan(Tokens), nl, write('Successful Scan'), nl, !,
      write(Tokens), nl, nl,
      seen, program(expr(E),Tokens,[eop]),write('Successful Parse'),nl,!,
      write(expr(E)), nl, nl,
      evaluate(E,Result),nl,write('Result =  '),pp(Result),nl.

%------------------------------------------------------------------------------
%---------  Parser  -----------------------------------------------------------

program(expr(E)) --> expr(E).

expr(lamb(X,E)) --> [lparen],['L'],[var(X)],expr(E1),restlamb(E1,E).

 restlamb(E,E) --> [rparen].
 restlamb(var(Y),lamb(Y,E)) --> expr(E1),restlamb(E1,E).

expr(E) --> [lparen],expr(E1),expr(E2),restcomb(E1,E2,E).

 restcomb(E1,E2,comb(E1,E2)) --> [rparen].
 restcomb(E1,E2,E) --> expr(E3), restcomb(comb(E1,E2),E3,E).
  
expr(var(X)) --> [var(X)].       expr(con(X)) --> [num(X)].
expr(con(add)) --> [add].        expr(con(sub)) --> [sub].
expr(con(mul)) --> [mul].        expr(con(div)) --> [div].
expr(con(succ)) --> [succ].      expr(con(pred)) --> [pred].
expr(con(sqr)) --> [sqr].
expr(con(true)) --> [true].      expr(con(false)) --> [false].

%------------------------------------------------------------------------------

getfilename(F) :- get0(C),restfilename(C,Cs),name(F,Cs).
  restfilename(C,[C|Cs]) :- filechar(C),get0(D),restfilename(D,Cs).
  restfilename(C,[]).

%------------------------------------------------------------------------------
%---------  Scanner  ----------------------------------------------------------

scan([T|Lt]) :-  tab(4), getch(C), gettoken(C, T, C1), restprog(T, C1, Lt).

getch(C) :- get0(C),(endline(C),nl,tab(4) ; endfile(C),nl ; put(C)).

restprog(eop, C, []).        % end of file reached with previous char
restprog(T,   C, [U|Lt]) :- gettoken(C, U, D), restprog(U, D, Lt).

gettoken(C, eop, 0) :- endfile(C).  
gettoken(C, T,  D)  :- single(C,T), getch(D).
gettoken(C, T,  E)  :- letter(C), getch(D), restvar(D, Lc, E), 
                       name(V, [C|Lc]), (reswd(V),T=V ; T=var(V)).
  restvar(C, [C|Lc], E) :- idchar(C), getch(D),restvar(D,Lc,E).
  restvar(C, [],     C).   % end variable if C is not valid.
gettoken(C, num(N), E) :- digit(C), getch(D), restnum(D, Lc, E),
                          name(N, [C|Lc]).
  restnum(C, [C|Lc], E) :- digit(C), getch(D), restnum(D, Lc, E).
  restnum(C, [],     C).   % end number if C is not a digit
gettoken(C, T, E)   :- whitespace(C), getch(D), gettoken(D,T,E).
gettoken(C, T, E)   :- write('Illegal character: '), put(C), nl, abort.

reswd('L').         reswd(succ).       reswd(pred).
reswd(add).         reswd(sub).        reswd(mul).    reswd(div).
reswd(sqr).         reswd(true).       reswd(false). 

single(40,lparen).  single(41,rparen).  

%------------------------------------------------------------------------------

lower(C) :- 97=<C,C=<122.       % a-z
upper(C) :- 65=<C,C=<90.        % A-Z
digit(C) :- 48=<C,C=<57.        % 0-9

space(32).     tabch(9).      period(46).      slash(47).
endline(10).   endfile(26).   endfile(-1).     prime(39).

whitespace(C) :- space(C) ; tabch(C) ; endline(C).
letter(C) :- lower(C) ; upper(C). 
idchar(C) :- letter(C) ; digit(C) ; prime(C).
filechar(C) :- letter(C) ; digit(C) ; period(C) ; slash(C).

%------------------------------------------------------------------------------
