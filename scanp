% File: wren/scanp

%   Scanning and Parsing Wren
%   ======== === ======= ====

%------------------------------------------------------------------------------
%---------  Parser  -----------------------------------------------------------

%   This parser handles only a small subset of Wren.
%   Try it on the program nodecs.w.

program(AST) --> [program],[ide(I)],[is],blck(AST).

blck(prog(Decs,Cmds)) --> decs(Decs),[begin],cmds(Cmds),[end].

decs([]) --> [].

cmds(Cmds) --> command(Cmd), restcmds(Cmd,Cmds).
  restcmds(Cmd,[Cmd|Cmds]) --> [semicolon], cmds(Cmds).
  restcmds(Cmd,[Cmd])      --> [].

command(while(Test,Body)) --> 
                       [while],boolexpr(Test), [do], cmds(Body), [end],[while].

command(assign(V,E)) --> [ide(V)], [assign], expr(E).

command(write(E)) --> [write], intexpr(E).

command(Cmd) --> [if],boolexpr(Test),[then],cmds(Then),restif(Test,Then,Cmd).
  restif(Test,Then,if(Test,Then,Else)) --> [else],cmds(Else),[end],[if].
  restif(Test,Then,if(Test,Then)) --> [end],[if].

expr(E) --> intexpr(E).                 expr(E) --> boolexpr(E).

intexpr(E) --> term(T), restintexpr(T,E).
  restintexpr(T,E) --> weakop(Op), term(T1), restintexpr(exp(Op,T,T1),E).
  restintexpr(E,E) --> [].

term(T) --> element(P), restterm(P,T).
  restterm(P,T) --> strongop(Op), element(P1), restterm(exp(Op,P,P1),T).
  restterm(T,T) --> [].

element(num(N)) --> [num(N)].            element(ide(I)) --> [ide(I)].
element(E) --> [lparen], intexpr(E), [rparen].
element(minus(E)) --> [minus], element(E).

comparison(bexp(R,E1,E2)) --> intexpr(E1),rel(R),intexpr(E2).

rel(equal) --> [equal].  rel(neq) --> [neq].    rel(less) --> [less].    
rel(grtr) --> [grtr].    rel(gteq) --> [gteq].  rel(lteq) --> [lteq].

weakop(plus) --> [plus].      weakop(minus) --> [minus].

strongop(times) --> [times].  strongop(divides) --> [divides].


%------------------------------------------------------------------------------
%-- Utilities -----------------------------------------------------------------

go :- nl,write('>>> Interpreting: Wren <<<'), nl, nl,
      write('Enter name of source file: '), nl, getfilename(FileName), nl, 
      see(FileName), scan(Tokens), seen, write('Scan successful'), nl, !,
      write(Tokens), nl, nl,
      program(Parse,Tokens,[eop]), write('Parse successful'), nl, !,
      write(Parse), nl, nl.

getfilename(W) :- get0(C),restfilename(C,Cs),name(W,Cs).
   restfilename(C,[C|Cs]) :- filechar(C),get0(D),restfilename(D,Cs).
   restfilename(C,[]).



%------------------------------------------------------------------------------
%---------  Scanner  ----------------------------------------------------------

scan([T|Lt]) :-  tab(4), getch(C), gettoken(C, T, D), restprog(T, D, Lt), !.

getch(C) :- get0(C), (endline(C),nl,tab(4) ; endfile(C),nl ; put(C)).

restprog(eop, C, []).        % end of file reached with previous character
restprog(T,   C, [U|Lt]) :- gettoken(C, U, D), restprog(U, D, Lt).

gettoken(C, eop, 0) :- endfile(C).  
gettoken(C, T, D) :- single(C,T), getch(D).
gettoken(C, T, E) :- double(C,U),getch(D),(pair(C,D,T),getch(E) ; T=U,E=D).
gettoken(C, T, E) :- lower(C), getch(D), restid(D, Lc, E),   
                     name(I, [C|Lc]), (reswd(I),T=I ; T=ide(I)).
  restid(C, [C|Lc], E) :- idchar(C), getch(D),restid(D,Lc,E).
  restid(C, [],     C).    % end identifier if C is not id character
gettoken(C, num(N), E) :- digit(C), getch(D), restnum(D, Lc, E),  
                          name(N, [C|Lc]). 
  restnum(C, [C|Lc], E) :- digit(C), getch(D), restnum(D, Lc, E).
  restnum(C, [],     C).    % end number if C is not a digit
gettoken(C, T, E) :- whitespace(C), getch(D), gettoken(D,T,E).
gettoken(C, T, E) :- write('Illegal character: '), put(C), nl, abort.

reswd(program).  reswd(is).       reswd(begin).    reswd(end).   
reswd(var).      reswd(integer).  reswd(boolean).  reswd(read). 
reswd(write).    reswd(while).    reswd(do).       reswd(if).    
reswd(then).     reswd(else).     reswd(skip).     reswd(or).  
reswd(and).      reswd(true).     reswd(false).    reswd(not). 

single(40,lparen).   single(41,rparen).    single(42,times). 
single(43,plus).     single(44,comma).     single(45,minus). 
single(47,divides).  single(59,semicolon). single(61,equal).

double(58,colon).    double(60,less).      double(62,grtr).   

pair(58,61,assign).       % :=
pair(60,61,lteq).         % <=
pair(60,62,neq).          % <>
pair(62,61,gteq).         % >=

%-----------------------------------------------------------------------

lower(C) :- 97=<C,C=<122.       % a-z
upper(C) :- 65=<C,C=<90.        % A-Z
digit(C)  :- 48=<C,C=<57.       % 0-9

space(32).     tabch(9).      period(46).      slash(47).     
endline(10).   endfile(26).   endfile(-1).

whitespace(C) :- space(C) ; tabch(C) ; endline(C).
idchar(C) :- lower(C) ; digit(C).
filechar(C) :- lower(C) ; upper(C) ; digit(C) ; period(C) ; slash(C).

%------------------------------------------------------------------------------
